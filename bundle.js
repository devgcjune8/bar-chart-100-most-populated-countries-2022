(function (d3) {
  'use strict';

  const svg = d3.select('svg');


  const width = +svg.attr('width');
  const height = +svg.attr('height');
  const margin = { top: 50, left: 120, bottom: 15, right:15 };
  const innerWidth = width - margin.left - margin.right;
  const innerHeight = height - margin.top - margin.top;

  function render(data) {
    const xValue =  d => d.population;
    const yValue = d => d.country;
    
    const xScale = d3.scaleLinear()
    								.domain([0, d3.max(data, xValue)])
    								.range([0, innerWidth]);
    								
    const yScale = d3.scaleBand()
    								.domain(data.map(yValue))
    								.range([0, innerHeight])
    								.padding(0.25);
    
    const g = svg.append('g')
    						 .attr('transform',`translate(${margin.left},${margin.top})`);
    const leftAxis = d3.axisLeft(yScale);
    const topAxis = d3.axisTop(xScale);
    topAxis.ticks(10);
    g.append('g').call(leftAxis);
    g.append('g').call(topAxis)
    	.attr('transform',`translate(0,0)`);

    g
      .selectAll('rect')
      .data(data)
    	.enter()
    	.append('rect')
    	.attr('y', d => yScale(yValue(d)))
    	.attr('width', d => xScale(xValue(d)))
    	.attr('height', yScale.bandwidth())
    	.append('title')
    	.text(xValue)
    	.attr('class', 'tip');
  	
    const populationNumber = document.querySelectorAll('.tip');

  		populationNumber.forEach(addComma);

  		function addComma(item) {
    	let pop = parseInt(item.innerHTML);
  		return item.innerHTML = pop.toLocaleString()  
  }

  }
  d3.csv('data.csv').then(data => {
    data.forEach(d => {
      d.population = +d.population*1000;
    });
    render(data); 
  });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCwgY3N2LCBzY2FsZUxpbmVhciwgbWF4LCBzY2FsZUJhbmQsIGF4aXNMZWZ0LCBheGlzVG9wIH0gZnJvbSAnZDMnO1xuXG5jb25zdCBzdmcgPSBzZWxlY3QoJ3N2ZycpO1xuXG5cbmNvbnN0IHdpZHRoID0gK3N2Zy5hdHRyKCd3aWR0aCcpO1xuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcbmNvbnN0IG1hcmdpbiA9IHsgdG9wOiA1MCwgbGVmdDogMTIwLCBib3R0b206IDE1LCByaWdodDoxNSB9O1xuY29uc3QgaW5uZXJXaWR0aCA9IHdpZHRoIC0gbWFyZ2luLmxlZnQgLSBtYXJnaW4ucmlnaHQ7XG5jb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4udG9wO1xuXG5mdW5jdGlvbiByZW5kZXIoZGF0YSkge1xuICBjb25zdCB4VmFsdWUgPSAgZCA9PiBkLnBvcHVsYXRpb25cbiAgY29uc3QgeVZhbHVlID0gZCA9PiBkLmNvdW50cnlcbiAgXG4gIGNvbnN0IHhTY2FsZSA9IHNjYWxlTGluZWFyKClcbiAgXHRcdFx0XHRcdFx0XHRcdC5kb21haW4oWzAsIG1heChkYXRhLCB4VmFsdWUpXSlcbiAgXHRcdFx0XHRcdFx0XHRcdC5yYW5nZShbMCwgaW5uZXJXaWR0aF0pXG4gIFx0XHRcdFx0XHRcdFx0XHRcbiAgY29uc3QgeVNjYWxlID0gc2NhbGVCYW5kKClcbiAgXHRcdFx0XHRcdFx0XHRcdC5kb21haW4oZGF0YS5tYXAoeVZhbHVlKSlcbiAgXHRcdFx0XHRcdFx0XHRcdC5yYW5nZShbMCwgaW5uZXJIZWlnaHRdKVxuICBcdFx0XHRcdFx0XHRcdFx0LnBhZGRpbmcoMC4yNSlcbiAgXG4gIGNvbnN0IGcgPSBzdmcuYXBwZW5kKCdnJylcbiAgXHRcdFx0XHRcdFx0IC5hdHRyKCd0cmFuc2Zvcm0nLGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sJHttYXJnaW4udG9wfSlgKVxuICBjb25zdCBsZWZ0QXhpcyA9IGF4aXNMZWZ0KHlTY2FsZSlcbiAgY29uc3QgdG9wQXhpcyA9IGF4aXNUb3AoeFNjYWxlKVxuICB0b3BBeGlzLnRpY2tzKDEwKVxuICBnLmFwcGVuZCgnZycpLmNhbGwobGVmdEF4aXMpXG4gIGcuYXBwZW5kKCdnJykuY2FsbCh0b3BBeGlzKVxuICBcdC5hdHRyKCd0cmFuc2Zvcm0nLGB0cmFuc2xhdGUoMCwwKWApXG5cbiAgZ1xuICAgIC5zZWxlY3RBbGwoJ3JlY3QnKVxuICAgIC5kYXRhKGRhdGEpXG4gIFx0LmVudGVyKClcbiAgXHQuYXBwZW5kKCdyZWN0JylcbiAgXHQuYXR0cigneScsIGQgPT4geVNjYWxlKHlWYWx1ZShkKSkpXG4gIFx0LmF0dHIoJ3dpZHRoJywgZCA9PiB4U2NhbGUoeFZhbHVlKGQpKSlcbiAgXHQuYXR0cignaGVpZ2h0JywgeVNjYWxlLmJhbmR3aWR0aCgpKVxuICBcdC5hcHBlbmQoJ3RpdGxlJylcbiAgXHQudGV4dCh4VmFsdWUpXG4gIFx0LmF0dHIoJ2NsYXNzJywgJ3RpcCcpXG5cdFxuICBjb25zdCBwb3B1bGF0aW9uTnVtYmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRpcCcpXG5cblx0XHRwb3B1bGF0aW9uTnVtYmVyLmZvckVhY2goYWRkQ29tbWEpXG5cblx0XHRmdW5jdGlvbiBhZGRDb21tYShpdGVtKSB7XG4gIFx0bGV0IHBvcCA9IHBhcnNlSW50KGl0ZW0uaW5uZXJIVE1MKVxuXHRcdHJldHVybiBpdGVtLmlubmVySFRNTCA9IHBvcC50b0xvY2FsZVN0cmluZygpICBcbn1cblxufVxuY3N2KCdkYXRhLmNzdicpLnRoZW4oZGF0YSA9PiB7XG4gIGRhdGEuZm9yRWFjaChkID0+IHtcbiAgICBkLnBvcHVsYXRpb24gPSArZC5wb3B1bGF0aW9uKjEwMDBcbiAgfSlcbiAgcmVuZGVyKGRhdGEpIFxufSlcblxuXG4iXSwibmFtZXMiOlsic2VsZWN0Iiwic2NhbGVMaW5lYXIiLCJtYXgiLCJzY2FsZUJhbmQiLCJheGlzTGVmdCIsImF4aXNUb3AiLCJjc3YiXSwibWFwcGluZ3MiOiI7OztFQUVBLE1BQU0sR0FBRyxHQUFHQSxTQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDMUI7QUFDQTtFQUNBLE1BQU0sS0FBSyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNqQyxNQUFNLE1BQU0sR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7RUFDbkMsTUFBTSxNQUFNLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7RUFDNUQsTUFBTSxVQUFVLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztFQUN0RCxNQUFNLFdBQVcsR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDO0FBQ3JEO0VBQ0EsU0FBUyxNQUFNLENBQUMsSUFBSSxFQUFFO0VBQ3RCLEVBQUUsTUFBTSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFVO0VBQ25DLEVBQUUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFPO0VBQy9CO0VBQ0EsRUFBRSxNQUFNLE1BQU0sR0FBR0MsY0FBVyxFQUFFO0VBQzlCLFdBQVcsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFQyxNQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7RUFDekMsV0FBVyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLEVBQUM7RUFDakM7RUFDQSxFQUFFLE1BQU0sTUFBTSxHQUFHQyxZQUFTLEVBQUU7RUFDNUIsV0FBVyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUNuQyxXQUFXLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQztFQUNsQyxXQUFXLE9BQU8sQ0FBQyxJQUFJLEVBQUM7RUFDeEI7RUFDQSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO0VBQzNCLFVBQVUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFDO0VBQ3JFLEVBQUUsTUFBTSxRQUFRLEdBQUdDLFdBQVEsQ0FBQyxNQUFNLEVBQUM7RUFDbkMsRUFBRSxNQUFNLE9BQU8sR0FBR0MsVUFBTyxDQUFDLE1BQU0sRUFBQztFQUNqQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFDO0VBQ25CLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDO0VBQzlCLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO0VBQzdCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLGNBQWMsQ0FBQyxFQUFDO0FBQ3RDO0VBQ0EsRUFBRSxDQUFDO0VBQ0gsS0FBSyxTQUFTLENBQUMsTUFBTSxDQUFDO0VBQ3RCLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQztFQUNmLElBQUksS0FBSyxFQUFFO0VBQ1gsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ2xCLElBQUksSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3JDLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3pDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsU0FBUyxFQUFFLENBQUM7RUFDdEMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDO0VBQ25CLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQztFQUNoQixJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFDO0VBQ3hCO0VBQ0EsRUFBRSxNQUFNLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUM7QUFDNUQ7RUFDQSxFQUFFLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUM7QUFDcEM7RUFDQSxFQUFFLFNBQVMsUUFBUSxDQUFDLElBQUksRUFBRTtFQUMxQixHQUFHLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFDO0VBQ3JDLEVBQUUsT0FBTyxJQUFJLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQyxjQUFjLEVBQUU7RUFDOUMsQ0FBQztBQUNEO0VBQ0EsQ0FBQztBQUNEQyxRQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSTtFQUM3QixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJO0VBQ3BCLElBQUksQ0FBQyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSTtFQUNyQyxHQUFHLEVBQUM7RUFDSixFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQUM7RUFDZCxDQUFDOzs7OyJ9